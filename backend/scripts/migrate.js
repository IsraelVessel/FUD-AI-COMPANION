const fs = require('fs')\nconst path = require('path')\nrequire('dotenv').config()\n\nconst { Pool } = require('pg')\nconst logger = require('../utils/logger')\n\n// Database connection\nconst pool = new Pool({\n  host: process.env.DB_HOST || 'localhost',\n  port: process.env.DB_PORT || 5432,\n  database: process.env.DB_NAME || 'fud_ai_companion',\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false\n})\n\nasync function runMigration() {\n  try {\n    logger.info('Starting database migration...')\n\n    // Read the schema file\n    const schemaPath = path.join(__dirname, '..', '..', 'database', 'schema.sql')\n    const schemaSQL = fs.readFileSync(schemaPath, 'utf8')\n\n    // Execute the schema\n    await pool.query(schemaSQL)\n    \n    logger.info('✅ Database schema created successfully')\n\n    // Run any additional migrations here\n    await seedInitialData()\n\n    logger.info('✅ Database migration completed successfully')\n    \n  } catch (error) {\n    logger.error('❌ Database migration failed:', error)\n    process.exit(1)\n  } finally {\n    await pool.end()\n  }\n}\n\nasync function seedInitialData() {\n  logger.info('Seeding initial data...')\n  \n  try {\n    // Create initial faculties\n    const faculties = [\n      { name: 'Faculty of Engineering', code: 'ENG' },\n      { name: 'Faculty of Science', code: 'SCI' },\n      { name: 'Faculty of Arts and Social Sciences', code: 'ARTS' },\n      { name: 'Faculty of Education', code: 'EDU' },\n      { name: 'Faculty of Management Sciences', code: 'MGT' }\n    ]\n\n    for (const faculty of faculties) {\n      await pool.query(`\n        INSERT INTO faculties (name, code)\n        VALUES ($1, $2)\n        ON CONFLICT (code) DO NOTHING\n      `, [faculty.name, faculty.code])\n    }\n\n    // Create initial departments\n    const departments = [\n      { name: 'Computer Science', code: 'CSC', facultyCode: 'SCI' },\n      { name: 'Mathematics', code: 'MTH', facultyCode: 'SCI' },\n      { name: 'Physics', code: 'PHY', facultyCode: 'SCI' },\n      { name: 'Civil Engineering', code: 'CVE', facultyCode: 'ENG' },\n      { name: 'Electrical Engineering', code: 'EEE', facultyCode: 'ENG' },\n      { name: 'English Language', code: 'ENG', facultyCode: 'ARTS' },\n      { name: 'Economics', code: 'ECO', facultyCode: 'ARTS' },\n      { name: 'Education', code: 'EDU', facultyCode: 'EDU' },\n      { name: 'Business Administration', code: 'BUS', facultyCode: 'MGT' },\n      { name: 'Accounting', code: 'ACC', facultyCode: 'MGT' }\n    ]\n\n    for (const dept of departments) {\n      // Get faculty ID\n      const facultyResult = await pool.query('SELECT id FROM faculties WHERE code = $1', [dept.facultyCode])\n      if (facultyResult.rows.length > 0) {\n        const facultyId = facultyResult.rows[0].id\n        await pool.query(`\n          INSERT INTO departments (name, code, faculty_id)\n          VALUES ($1, $2, $3)\n          ON CONFLICT (code) DO NOTHING\n        `, [dept.name, dept.code, facultyId])\n      }\n    }\n\n    // Create sample courses for Computer Science\n    const cscDeptResult = await pool.query('SELECT id FROM departments WHERE code = $1', ['CSC'])\n    if (cscDeptResult.rows.length > 0) {\n      const cscDeptId = cscDeptResult.rows[0].id\n      \n      const courses = [\n        { code: 'CSC101', title: 'Introduction to Computing', level: 100, semester: 'First', credits: 3 },\n        { code: 'CSC102', title: 'Problem Solving', level: 100, semester: 'Second', credits: 3 },\n        { code: 'CSC201', title: 'Computer Programming I', level: 200, semester: 'First', credits: 3 },\n        { code: 'CSC202', title: 'Computer Programming II', level: 200, semester: 'Second', credits: 3 },\n        { code: 'CSC301', title: 'Data Structures and Algorithms', level: 300, semester: 'First', credits: 3 },\n        { code: 'CSC302', title: 'Database Systems', level: 300, semester: 'Second', credits: 3 },\n        { code: 'CSC401', title: 'Software Engineering', level: 400, semester: 'First', credits: 3 },\n        { code: 'CSC402', title: 'Project', level: 400, semester: 'Second', credits: 6 }\n      ]\n\n      for (const course of courses) {\n        await pool.query(`\n          INSERT INTO courses (department_id, course_code, course_title, credit_units, level, semester)\n          VALUES ($1, $2, $3, $4, $5, $6)\n          ON CONFLICT (course_code) DO NOTHING\n        `, [cscDeptId, course.code, course.title, course.credits, course.level, course.semester])\n      }\n    }\n\n    // Create admin user\n    const bcrypt = require('bcryptjs')\n    const adminPassword = await bcrypt.hash('admin123', 12)\n    \n    await pool.query(`\n      INSERT INTO users (email, password_hash, role, is_active, email_verified)\n      VALUES ('admin@fud.edu.ng', $1, 'admin', true, true)\n      ON CONFLICT (email) DO NOTHING\n    `, [adminPassword])\n\n    // Create sample knowledge base entries\n    const knowledgeEntries = [\n      {\n        category: 'Academic',\n        title: 'Course Registration Process',\n        content: 'To register for courses at FUD: 1. Log into the student portal, 2. Select current semester, 3. Choose your courses based on your level and department, 4. Submit registration, 5. Pay registration fees.',\n        keywords: ['registration', 'courses', 'semester']\n      },\n      {\n        category: 'Payment',\n        title: 'School Fee Payment',\n        content: 'School fees can be paid through: 1. Bank deposit, 2. Online payment portal, 3. POS agents on campus. Always keep your payment receipts safe.',\n        keywords: ['payment', 'fees', 'school']\n      },\n      {\n        category: 'Campus Life',\n        title: 'Library Services',\n        content: 'The FUD library offers: 1. Study spaces, 2. Computer access, 3. Research databases, 4. Printing services. Open Monday-Saturday 8AM-10PM.',\n        keywords: ['library', 'study', 'research']\n      },\n      {\n        category: 'Academic',\n        title: 'CGPA Calculation',\n        content: 'CGPA is calculated as the weighted average of all course grades. Grade points: A=5, B=4, C=3, D=2, F=0. CGPA = Total Grade Points / Total Credit Units.',\n        keywords: ['cgpa', 'grades', 'calculation']\n      }\n    ]\n\n    for (const entry of knowledgeEntries) {\n      await pool.query(`\n        INSERT INTO knowledge_base (category, title, content, keywords)\n        VALUES ($1, $2, $3, $4)\n      `, [entry.category, entry.title, entry.content, entry.keywords])\n    }\n\n    logger.info('✅ Initial data seeded successfully')\n    \n  } catch (error) {\n    logger.error('❌ Failed to seed initial data:', error)\n    throw error\n  }\n}\n\n// Run migration if called directly\nif (require.main === module) {\n  runMigration()\n}\n\nmodule.exports = { runMigration, seedInitialData }
